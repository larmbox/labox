@use 'sass:math';
@import '../../theme/imports';

$lb-switch-border-radius: 64px !default;
$lb-switch-focus-shadow-size: $lb-focus-shadow-size !default;
$lb-switch-text-color: $lb-text-color !default;
$lb-switch-border-color: $lb-border-color !default;
$lb-switch-border-width: $lb-border-width !default;

$lb-switch-size: 1.5rem !default;

$lb-switch-size-sm: 1.25rem !default;

$lb-switch-size-lg: 1.75rem !default;

@mixin switch-size($suffix, $size) {
  &.#{c('LSwitch')}-#{$suffix} {
    .#{c('LSwitch')}-inner .#{c('LSwitch')}-descriptors {
      label {
        margin-top: math.div($size, 2) - math.div($lb-line-height, 2);
      }
    }
    .#{c('LSwitch')}-box {
      width: $size * 2;
      height: $size;
      padding: 0.175rem;
      .#{c('LSwitch')}-box2 {
        width: $size - 0.35rem;
        height: $size - 0.35rem;
        font-size: $size - 0.4rem;
      }
    }
    input {
      width: $size * 2;
      height: $size;

      &:active:not(:disabled) {
        + .#{c('LSwitch')}-box {
          .#{c('LSwitch')}-box2 {
            width: $size * 1.25;
            height: $size * 0.66;
          }
        }
      }
    }
  }
}

@mixin switch-color($color, $theme: $lb-default-theme) {
  .#{c('LSwitch')}-box2 {
    background-color: color('gray', 8, $theme);
    color: contrast-tone(color2($color, 8, $theme));
  }

  input {
    &:checked {
      + .#{c('LSwitch')}-box {
        background-color: color($color, 8, $theme);
        border-color: color($color, 9, $theme);
        .#{c('LSwitch')}-box2 {
          left: 100%;
          transform: translateX(-100%);
          background-color: #fff;
          color: color($color, 8, $theme);
        }
      }
    }

    &:focus {
      + .#{c('LSwitch')}-box {
        border-color: color($color, 8, $theme);
        box-shadow: 0 0 0 $lb-switch-focus-shadow-size
          color($color, 'T25', $theme);
      }
    }

    &:disabled:checked {
      + .#{c('LSwitch')}-box {
        border-color: color($color, 4, $theme);
        background-color: color($color, 4, $theme);
        .#{c('LSwitch')}-box2 {
          color: color($color, 4, $theme);
        }
      }
    }

    &:disabled:not(:checked) {
      + .#{c('LSwitch')}-box {
        background-color: color('gray', 1, $theme);
        .#{c('LSwitch')}-box2 {
          background-color: color('gray', 4, $theme);
        }
      }
    }
  }
}

.#{c('LSwitch')} {
  display: inline-flex;
  position: relative;
  margin-bottom: $lb-spacing;
  align-items: center;

  &.#{c('LSwitch')}-block {
    width: 100%;
    display: flex;
  }

  @mixin switch-variants($variant, $theme: $lb-default-theme) {
    &.#{c(LSwitch)}-#{$variant} {
      @include switch-color($variant, $theme);
    }
  }

  @each $name, $variant-map in lb-themes() {
    @if css-vars() {
      @include switch-variants($name);
    } @else {
      &.#{$lb-theme-prefix}#{$name} {
        @each $variant, $_ in $variant-map {
          @include switch-variants($variant, $name);
        }
      }
    }
  }

  .#{c('LSwitch')}-box {
    flex-shrink: 0;
    display: flex;
    align-items: center;
    border: $lb-switch-border-width solid $lb-switch-border-color;
    border-radius: $lb-switch-border-radius;
    box-shadow: 0 0 0 $lb-switch-focus-shadow-size transparent;
    transition: border-color $lb-animation-time ease-in-out,
      background-color $lb-animation-time * 2 ease-in-out,
      box-shadow $lb-animation-time ease-in-out;

    .#{c('LSwitch')}-box2 {
      left: 0;
      position: relative;
      pointer-events: none;
      transition: left $lb-animation-time ease-in-out,
        transform $lb-animation-time ease-in-out,
        background-color $lb-animation-time * 2 ease-in-out,
        color $lb-animation-time ease-in-out,
        width $lb-animation-time * 2 ease-in-out,
        height $lb-animation-time * 2 ease-in-out;
      border-radius: $lb-switch-border-radius;
      display: flex;
      align-items: center;
      justify-content: center;

      .#{c('LSwitch')}-icon {
        position: absolute;
        &:first-of-type {
          opacity: 0;
        }
      }
    }
  }

  .#{c('LSwitch')}-inner {
    display: flex;
    flex: 1;
    .#{c('LSwitch')}-descriptors {
      display: inline-flex;
      flex-direction: column;
      justify-content: center;
      margin-left: $lb-spacing-xs * 2;
      .#{c('LSwitch')}-label {
        display: block;
        line-height: $lb-line-height;
      }
      .#{c('LSwitch')}-feedback {
        display: block;
      }
      .#{c('LSwitch')}-description {
        margin-bottom: 0;
        display: block;
      }
    }
  }

  input {
    position: absolute;
    left: 0;
    top: 0;
    margin: 0;
    opacity: 0;
    z-index: 1;

    &:checked {
      + .#{c('LSwitch')}-box {
        .#{c('LSwitch')}-box2 {
          .#{c('LSwitch')}-icon:first-of-type {
            opacity: 1;
          }
          .#{c('LSwitch')}-icon:last-of-type {
            opacity: 0;
          }
        }
      }
    }
  }

  &.form-feedback-error {
    @include switch-color('error');

    .#{c('LSwitch')}-box {
      border-color: color('error', 8);
    }
  }

  &.form-feedback-success {
    @include switch-color('success');

    .#{c('LSwitch')}-box {
      border-color: color('error', 8);
    }
  }

  @include switch-size('md', $lb-switch-size);
  @include switch-size('sm', $lb-switch-size-sm);
  @include switch-size('lg', $lb-switch-size-lg);
}
