@import '../../theme/imports';

@mixin button-color($color) {
  background-color: color($color, 8);
  border-color: color($color, 9);
  color: contrast-tone(color($color, 8));

  &:not(:disabled):not(:focus):hover {
    background-color: color($color, 9);
    border-color: color($color, 10);
  }

  &:not(:disabled):active {
    background-color: color($color, 8);
    border-color: color($color, 9);
  }

  &:focus {
    box-shadow: 0 0 0 v(focus-shadow-size) color($color, 'T20');
  }

  &:disabled {
    background-color: color($color, 5);
    border-color: color($color, 5);
  }

  // &.#{c('LButton')}-loading .#{c('LLoading')} {
  //   color: color($color, 1);
  // }
}

@mixin button-color-outline($color) {
  background-color: transparent;
  border-color: color($color, 8);
  color: color($color, 8);

  &.#{c('LButton')}-loading .#{c('LLoading')} {
    color: color($color, 8);
  }

  &:not(:disabled):hover {
    background-color: color($color, 'T10');
    color: color($color, 8);
  }

  &:not(:disabled):active {
    background-color: transparent;
    color: color($color, 8);
  }

  &:focus {
    box-shadow: 0 0 0 v(focus-shadow-size) color($color, 'T20');
  }

  &:disabled {
    border-color: color($color, 3);
    color: color($color, 4);
  }
}

.#{c('LButton')} {
  transition: background-color v(transition-time) v(transition-type),
    color v(transition-time) v(transition-type),
    border-color v(transition-time) v(transition-type),
    box-shadow v(transition-time) v(transition-type);
  justify-content: center;
  display: inline-flex;
  border-style: solid;
  border-width: v(border-width, c('LButton'));
  outline: none;
  text-align: center;
  white-space: nowrap;
  position: relative;
  padding: v(padding-y, c('LButton')) v(padding-x, c('LButton'));
  font-family: inherit;
  font-weight: v(font-weight, c('LButton'));
  border-radius: v(border-radius, c('LButton'));

  line-height: v(line-height, c('LButton'));
  font-size: v(font-size, c('LButton'));

  cursor: pointer;
  text-decoration: none;

  .#{c(LButton)}-content {
    display: flex;
    align-items: center;
  }

  @mixin button-variant($variant) {
    &.#{c(LButton)}-#{$variant} {
      &:not(.#{c('LButton')}-outline) {
        @include button-color($variant);
      }
      &.#{c('LButton')}-outline {
        @include button-color-outline($variant);
      }
    }
  }

  @each $variant in $lx-palettes {
    @include button-variant($variant);
  }

  &.#{c('LButton')}-icon-right {
    .#{c('LIcon')}:last-of-type {
      padding-left: calc(v(spacing) * 0.5);
    }
  }

  &.#{c('LButton')}-icon-left {
    .#{c('LIcon')}:first-of-type {
      padding-right: calc(v(spacing) * 0.5);
    }
  }

  &.#{c('LButton')}-block {
    display: flex;
    min-width: 100%;
  }

  &:disabled {
    cursor: default;
  }

  &.#{c(LButton)}-sm {
    padding: v(padding-y-sm, c('LButton')) v(padding-x-sm, c('LButton'));
    font-size: v(font-size-sm, c('LButton'));
    line-height: v(line-height-sm, c('LButton'));
  }

  &.#{c(LButton)}-lg {
    padding: v(padding-y-lg, c('LButton')) v(padding-x-lg, c('LButton'));
    font-size: v(font-size-lg, c('LButton'));
    line-height: v(line-height-lg, c('LButton'));
  }

  &.#{c('LButton')}-loading {
    align-items: center;
    .#{c('LLoading')} {
      position: absolute;
    }
    .#{c('LButton')}-content {
      visibility: hidden;
      opacity: 0;
    }
  }
}
